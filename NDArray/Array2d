from Benchmark import Benchmark
from DType import DType
from Intrinsics import strided_load
from List import VariadicList
from Math import div_ceil, min
from Memory import memset_zero
from Object import object, Attr
from Pointer import DTypePointer
from Random import rand, random_float64
from TargetInfo import simdwidthof
from Error import Error
from SIMD import SIMD
from Range import range
#st:StringLiteral)raises->(Bool,Error):
fn check_dims(rows:Int,cols:Int,x:Int,y:Int)raises->(Bool,Error):

        let safe: Bool = x>=rows and y>=cols
        let err:Error = Error("Index Outside of assigned array")
        return (safe,err)
    
struct Array[dtype:DType]:
    var data: DTypePointer[dtype]
    var rows: Int
    var cols: Int
    var size: Int
    
    fn __init__(inout self, rows: Int, cols: Int):
        self.data = DTypePointer[dtype].alloc(rows * cols)
        self.rows = rows
        self.cols = cols
        self.size = cols*rows
        self.zero()
    
    
    fn __copyinit__(inout self, other: Self):
        self.rows = other.rows
        self.cols = other.cols
        self.size = other.size
        self.data = DTypePointer[dtype].alloc(self.size)
        
        for i in range(self.size):
            let other_data = other.data.load(i)
            self.data.store(i,other_data)
        
        
    fn __del__(owned self):
        self.data.free()

    fn fill(inout self, val: SIMD[dtype,1]):
        memset_zero(self.data, self.rows * self.cols)
        self+=val
        
    fn zero(inout self):
        memset_zero(self.data, self.size)
    
    fn __imul__(inout self, rhs: SIMD[dtype,1]):
        for i in range(self.rows*self.cols):
            let simd_data = self.data.load(i)
            self.data.store(i, simd_data * rhs)
        
    fn __imul__(inout self, rhs: Array[dtype]):
        for i in range(self.rows*self.cols):
            let simd_data_self = self.data.load(i)
            let simd_data_rhs = rhs.data.load(i)
            self.data.store(i, simd_data_self * simd_data_rhs)
    
    fn __mul__(self, rhs: SIMD[dtype,1])->Array[dtype]:
        let result_array: Array[dtype] = Array[dtype](self.rows,self.cols)
        for i in range(self.size):
            let simd_data = self.data.load(i)
            result_array.data.store(i, simd_data * rhs)
        return result_array
    
    fn __mul__(self, rhs: Array[dtype])->Array[dtype]:
        let result_array: Array[dtype] = Array[dtype](self.rows,self.cols)
        for i in range(self.size):
            let simd_data_self = self.data.load(i)
            let simd_data_rhs = rhs.data.load(i)
            result_array.data.store(i, simd_data_self * simd_data_rhs)
        return result_array
        
    fn __iadd__(inout self, rhs: SIMD[dtype,1]):
        for i in range(self.size):
            let simd_data = self.data.load(i)
            self.data.store(i,simd_data+rhs)
        
    fn __iadd__(inout self, rhs: Array[dtype]):
        for i in range(self.size):
            let simd_data_self = self.data.load(i)
            let simd_data_rhs = rhs.data.load(i)
            self.data.store(i,simd_data_self + simd_data_rhs)
        
    fn __add__(self, rhs: SIMD[dtype,1])->Array[dtype]:
        let result_array: Array[dtype] = Array[dtype](self.rows,self.cols)
        for i in range(self.size):
            let simd_data = self.data.load(i)
            result_array.data.store(i,simd_data+rhs)
        return result_array
    
    fn __add__(self, rhs: Array[dtype])->Array[dtype]:
        let result_array: Array[dtype] = Array[dtype](self.rows,self.cols)
        for i in range(self.size):
            let simd_data_self = self.data.load(i)
            let simd_data_rhs = rhs.data.load(i)
            result_array.data.store(i,simd_data_self + simd_data_rhs)
        return result_array
    
    @always_inline
    fn __getitem__(self, y: Int, x: Int) raises -> SIMD[dtype,1]:
        # let safe: Bool
        # let err: Error
        let safe: Bool = x>(self.rows-1) or y>(self.cols-1)
        if safe:
            raise Error("Index Outside of assigned array get item")
        # return (safe,err)#,"get item")
        # if not safe:
        #     raise err
        return self.data.simd_load[1](y * self.cols + x)
    
    @always_inline
    fn __getitem__(self, x:Int) raises -> SIMD[dtype,1]:
        # let safe: Bool
        # let err: Error
        if self.cols>1:
            raise Error("Sub arrays not implemented for 2d Arrays")
        let safe: Bool = x>(self.rows-1)
        if safe:
            raise Error("Index Outside of assigned array get item")
        # return (safe,err)#,"get item")
        # if not safe:
        #     raise err
        return self.data.simd_load[1](x)
    @always_inline
    fn load[nelts:Int](self, y: Int, x: Int) raises -> SIMD[dtype, nelts]:
        # let safe: Bool = x>(self.rows-1) or y>(self.cols-1)
        # if safe:
        #     raise Error("Index Outside of assigned array load")
        # let safe2: Bool =(y * self.cols + x+nelts)>self.size
        # if safe2:
        #     raise Error("Span of attempted load excedes size of Array")
        return self.data.simd_load[nelts](y * self.cols + x)
    @always_inline
    fn __setitem__(self, y: Int, x: Int, val: SIMD[dtype,1]) raises:
        let safe: Bool = x>(self.rows-1) or y>(self.cols-1)
        if safe:
            raise Error("Index Outside of assigned array set item")
        return self.data.simd_store[1](y * self.cols + x, val)
    @always_inline
    fn __setitem__(self,  x: Int, val: SIMD[dtype,1]) raises:
        if self.cols>1:
            raise Error("Sub arrays not implemented for 2d Arrays")
        if x>(self.rows-1):
            raise Error("Index Outside of assigned array set item")
        return self.data.simd_store[1]( x, val)
    
    @always_inline
    fn store[nelts:Int](self, y: Int, x: Int, val: SIMD[dtype, nelts]) raises:
        # let safe: Bool = x>(self.rows-1) or y>(self.cols-1)
        # if safe:
        #     raise Error("Index Outside of assigned array load")
        # let safe2: Bool =(y * self.cols + x+nelts)>self.size
        # if safe2:
        #     raise Error("Span of attempted load excedes size of Array")
        self.data.simd_store[nelts](y * self.cols + x, val)

fn arrange[dtype:DType](start:SIMD[dtype,1],end:SIMD[dtype,1],step:SIMD[dtype,1])raises->Array[dtype]:
    """Creates an endpoint inclusive range between start and end with in steps of step
        Stores to a DType pointer
        Partially replicates the np.arrange function
    """
    if start>=end:
        raise Error("End must be greater than start")
    let diff: SIMD[dtype,1] = end-start
    let number_of_steps: SIMD[dtype,1] = diff/step
    let int_number_of_steps: Int = number_of_steps.cast[DType.int32]().to_int() + 1
    let arr: Array[dtype]=Array[dtype](int_number_of_steps,1)
    # arr.fill(start)
    for i in range(int_number_of_steps):
        arr[i]=start+step*i
    return arr
alias Float64 =SIMD[DType.float64, 1]
def benchmark_arrange[dtype:DType]()-> (Float64,Int):
    var err_count:Int=0
    @parameter
    fn test_fn():
        try:
            _=arrange[dtype](0,5000,0.25)
        except:
            pass
            err_count+=1
    let secs = Float64(Benchmark().run[test_fn]()) / 1_000_000_000
    
    return secs, err_count
